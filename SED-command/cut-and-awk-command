
## cut and awk command 

cut : it is use to cut any records by using column or fields and char from any file or from any 
command output 

cut <options> <filename>

any-command | cut <option>

options:
-c cut by character 
-f cut by fields 
-d delimeter or to define any symbol to understand about fileds 

## -f option will not work without option d 

: , ; space these symbols can be consider as delimeter 

[root@rhel9-1 ~]# tail -n5 /etc/passwd
user1:x:1001:1001::/home/user1:/bin/bash
user2:x:1002:1002::/home/user2:/bin/bash
user3:x:1003:1003::/home/user3:/bin/bash
user4:x:1004:1004::/home/user4:/bin/bash
user5:x:1005:1005::/home/user5:/bin/bash

## this will cut 1 and 4 char from lines
[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -c1,4
ur
ur
ur
ur
ur

## this will cut 1 to 5  char from lines 
[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -c1-5
user1
user2
user3
user4
user5

## now lets see how to cut by field 

[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -d ':' -f1
user1
user2
user3
user4
user5
[root@rhel9-1 ~]#
## field 1 and 3 
[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -d ':' -f1,3
user1:1001
user2:1002
user3:1003
user4:1004
user5:1005
[root@rhel9-1 ~]#

## field 1 to 3 
[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -d ':' -f1-3
user1:x:1001
user2:x:1002
user3:x:1003
user4:x:1004
user5:x:1005
[root@rhel9-1 ~]#

## field 1 , 3 to 5 , and 6 
[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -d ':' -f1,3-5,6
user1:1001:1001::/home/user1
user2:1002:1002::/home/user2
user3:1003:1003::/home/user3
user4:1004:1004::/home/user4
user5:1005:1005::/home/user5
[root@rhel9-1 ~]#


[root@rhel9-1 ~]# cat new
this is first line
this is second line
this is third line
this is fourth line

[root@rhel9-1 ~]# cut -d' ' -f1,3 new
this first
this second
this third
this fourth

33:00

##lets see awk command 

[root@rhel9-1 ~]# tail -n5 /etc/passwd
user1:x:1001:1001::/home/user1:/bin/bash
user2:x:1002:1002::/home/user2:/bin/bash
user3:x:1003:1003::/home/user3:/bin/bash
user4:x:1004:1004::/home/user4:/bin/bash
user5:x:1005:1005::/home/user5:/bin/bash

## as there is : is comming as separator , we will try to get fields 

## so when we haven't give any filed separator

[root@rhel9-1 ~]# tail -n5 /etc/passwd | awk '{print $1,$2}'
user1:x:1001:1001::/home/user1:/bin/bash
user2:x:1002:1002::/home/user2:/bin/bash
user3:x:1003:1003::/home/user3:/bin/bash
user4:x:1004:1004::/home/user4:/bin/bash
user5:x:1005:1005::/home/user5:/bin/bash

## we need to provide -F option 

[root@rhel9-1 ~]# tail -n5 /etc/passwd | awk -F':' '{print $1,$2}'
user1 x
user2 x
user3 x
user4 x
user5 x

[root@rhel9-1 ~]# tail -n5 /etc/passwd | awk -F':' '{print $1,$2,$4}'
user1 x 1001
user2 x 1002
user3 x 1003
user4 x 1004
user5 x 1005

##but see the difference between cut and awk command 

[root@rhel9-1 ~]# tail -n5 /etc/passwd | cut -d':' -f1-2,4
user1:x:1001
user2:x:1002
user3:x:1003
user4:x:1004
user5:x:1005 

## in cut command : is not going away it is comming in output so bring same o/p in awk command 
## we can use OFS option 

[root@rhel9-1 ~]# tail -n5 /etc/passwd | awk -F':' '{print $1,$2,$4}' OFS=':'
user1:x:1001
user2:x:1002
user3:x:1003
user4:x:1004
user5:x:1005


### at some places we can see FS after '{print$1,$2}' instead of awk -F option before '{print$1,$2}' , both have same meaning and output 
## you can use anyone 

## FS = field separator 
##OFS= output field separator

[root@rhel9-1 ~]# tail -n5 /etc/passwd | awk '{print$1 ,$2 }' FS=':'
user1 x
user2 x
user3 x
user4 x
user5 x
## then we can use OFS output field separator
[root@rhel9-1 ~]# tail -n5 /etc/passwd | awk '{print$1 ,$2 }' FS=':' OFS='>>>'
user1>>>x
user2>>>x
user3>>>x
user4>>>x
user5>>>x

## so why do use awk command when we have cut command 
## see this , in below example if we take seperator as space , it is uneven 

[root@rhel9-1 ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
devtmpfs               4.0M     0  4.0M   0% /dev
tmpfs                  1.3G     0  1.3G   0% /dev/shm
tmpfs                  529M  7.4M  521M   2% /run
/dev/mapper/rhel-root   36G  4.1G   32G  12% /
/dev/vda2             1014M  213M  802M  21% /boot
/dev/vda1              599M  7.0M  592M   2% /boot/efi
tmpfs                  265M   36K  265M   1% /run/user/0

## filed 2 is not comming 
[root@rhel9-1 ~]# df -h | cut -d' ' -f1,2
Filesystem
devtmpfs
tmpfs
tmpfs
/dev/mapper/rhel-root
/dev/vda2
/dev/vda1
tmpfs

[root@rhel9-1 ~]# df -h  | awk '{print$1,$2,$3}'
Filesystem Size Used
devtmpfs 4.0M 0
tmpfs 1.3G 0
tmpfs 529M 7.4M
/dev/mapper/rhel-root 36G 4.1G
/dev/vda2 1014M 213M
/dev/vda1 599M 7.0M
tmpfs 265M 36K

## to make output more readable use coulumn -t option (tab)

[root@rhel9-1 ~]# df -h  | awk '{print$1,$2,$3}' | column -t
Filesystem             Size   Used
devtmpfs               4.0M   0
tmpfs                  1.3G   0
tmpfs                  529M   7.4M
/dev/mapper/rhel-root  36G    4.1G
/dev/vda2              1014M  213M
/dev/vda1              599M   7.0M
tmpfs                  265M   36K

## so in nutshell whenever you are facing issue with delimeter and facing issue with cut you can use awk option instead of cut

## one more example , find ipaddress from ifconfig 
[root@rhel9-1 ~]# ifconfig
enp0s1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.71.6  netmask 255.255.255.0  broadcast 192.168.71.255
        inet6 fd81:7b2b:51a7:a746:b4f8:74ff:fe4e:204c  prefixlen 64  scopeid 0x0<global>
        inet6 fe80::b4f8:74ff:fe4e:204c  prefixlen 64  scopeid 0x20<link>
        ether b6:f8:74:4e:20:4c  txqueuelen 1000  (Ethernet)
        RX packets 14900  bytes 3325380 (3.1 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 6448  bytes 727999 (710.9 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 10  bytes 1576 (1.5 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 10  bytes 1576 (1.5 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0


[root@rhel9-1 ~]# ifconfig | grep -iw inet  | awk '{print$2,$4}' | column -t
192.168.71.6  255.255.255.0
127.0.0.1     255.0.0.0

##how to store command output in a vraible 

[root@rhel9-1 ~]# a=$(ifconfig | grep -iw inet  | awk '{print$2}' | head -n1)
[root@rhel9-1 ~]#
[root@rhel9-1 ~]# echo $a
192.168.71.6


## whenever we need to store output of any command in a varaible in bash we use =$() 

[root@rhel9-1 ~]# b=date
[root@rhel9-1 ~]# echo $b
date
note when we use =$() then it takes command output of date and stors in b 

[root@rhel9-1 ~]# b=$(date)

[root@rhel9-1 ~]# echo $b
Fri Sep 15 08:17:53 PM EDT 2023


### if there is different type of delimiter 

[root@rhel9-1 ~]# cat hello.sh
this:is:ram;home
this;is>shyam;home
this>is;krishna;home
this:is:gods;home


[root@rhel9-1 ~]# awk -F'[:;>]' '{print$1,$2,$3,$4}' hello.sh | column -t
this  is  ram      home
this  is  shyam    home
this  is  krishna  home
this  is  gods     home